class node:
    def __init__(self,data=None,next=None):
        self.data=data
        self.next=next
class LinkedList:
    def __init__(self):
        self.head=None

    def insert_at_begining(self,data):
        Node = node(data,self.head)
        self.head = Node

    def print(self):
        if self.head is None:
            print("Linked list is empty")
            return
        itr=self.head
        llstr=''
        while itr:
            llstr+=str(itr.data) + '-->'
            itr=itr.next
        print(llstr)

    def insert_at_end(self,data):
        if self.head is None:
            self.head=node(data,None)
            return
        itr=self.head
        while itr.next:                  #till not last value
            itr=itr.next

        itr.next=node(data,None)         #if last value

    def insert_values(self,data_list):
        self.head=None
        for data in data_list:
            self.insert_at_end(data)


    def get_length(self):
        count=0
        itr=self.head
        while itr:
            count+=1
            itr=itr.next
        return count

    #remove the element at the given index

    def remove_at(self,index):
        if(index<0 or index >= self.get_length()):
            raise Exception("Invalid Index")

        if(index == 0):
            self.head=self.head.next
            return

        count=0
        itr=self.head
        while itr:
            if count == index-1:
                itr.next = itr.next.next  #since next to next is null therefore making next = next to next will make next null
                break
            itr=itr.next
            count+=1
     #insert at the given index
    def insert_at(self,index,data):
        if(index<0 or index>=self.get_length()):
            raise Exception("Invalid index")
        if index==0:
            self.insert_at_begining(data)

        count=0
        itr=self.head
        while itr:
            if(count==index-1):              #since we have to modify the the previous element
                Node=node(data,itr.next)
                itr.next=Node
                break

            itr=itr.next
            count+=1

if __name__=='__main__':
    ll=LinkedList()
    ll.insert_values(["banana","mango","grapes","orange"])
    #ll.insert_at_begining(5)
    #ll.insert_at_begining(89)
    #ll.insert_at_end(45)
    #ll.insert_at_end(54)
    #ll.remove_at(2)
    ll.insert_at(0,"figs")
    ll.print()
    print(ll.get_length())
    
